---
alwaysApply: true
---

# 技术栈

- electron
- vue3(需要使用 setup 语法)
- typescript
- Vuetify
- scss
- Vite
- VueRouter
- pinia

# 目的

实现一个多人配音的工具

# 技术架构要求

## 数据存储

- 配置文件使用 JSON 格式存储，便于程序读取和修改
- 项目数据按文件夹结构组织：项目名/原文.txt、项目名/文案.txt、项目名/角色.txt 等
- 支持项目数据导出为压缩包，包含所有配置和资源

## 错误处理

- API 调用失败时的重试机制和错误提示
- 文件读写失败时的异常处理和用户提示
- 网络连接问题的检测和提示

## 日志系统

- 记录用户操作日志，便于调试和问题追踪
- 记录 API 调用次数、生成时间等统计信息
- 支持日志导出和清理

## 开发要求

- 查看项目根目录的 开发任务清单.md，依次完成，确定完成后需要更新对应任务的状态
- 不要生成测试文件
- 不要生成说明文件

# 功能

## 设置

- 配置 Deepseek API 令牌的输入框，需要保存到本地
- 配置项目数据保存到哪
- 全局设置：默认 API 配置、默认保存路径等
- 快捷键配置：允许用户自定义快捷键
- 界面主题：支持明暗主题切换

## Step1. 项目列表

- 历史的项目列表
- 新建项目，输入项目名，一方面为标识，一方面用于保存资源
- 项目模板：支持保存和加载项目模板
- 项目备份：自动备份功能，防止数据丢失
- 项目搜索和过滤功能

## Step1. 设计文案

- 有两个输入框，左侧的输入框输入小说原文，用于参考。失去焦点后需要保存到本地，文件保存在 项目/原文.txt
- 右边的输入框，输入文案。失去焦点后需要保存到本地，文件保存在 项目/文案.txt
- 添加原文字数统计、文案字数统计显示
- 顶部有一个角色列表，用于在写文案的过程中，记录文案中都涉及到了哪些角色，手动添加、删除。失去焦点后需要保存到本地，文件保存在 项目/角色.txt
- AI 提示词和生成按钮，将原文发给 deepseek，得到解说文案，每次点击一次生成一个文案，文案需要保存到本地，文件保存到 项目/AI 文案/生成时间.txt
- AI 生成的每一个文案需要以列表的方式显示出来，点击后显示文案全文
- AI 提示词输入结束后，失去焦点需要保存到本地，文件保存到 项目/AI 文案/提示词.txt
- 下一步按钮，进入角色分配阶段

## Step2 角色分配

### 文案整理按钮

- 点击后将文案以换行为分隔符，每一行是一个块
- 如果块里的内容是空白，则忽略这个块

### 文案块

- 分配角色，可以快速选择在 Step1 中记录的角色，也可以手动输入
- 分配情绪，用于定义配音时该角色使用什么情绪
- 输入背景描述（可选），用于制作视频时用到
- 输入分镜描述（可选），就是这个镜头的画面应该是什么样的，用于制作视频时用到
- 分配画面角色（可选），用于制作视频时用到，就是朗读这一句的时候，画面里都有谁
- 可以新增、删除、插入后方、调整 文案块的顺序
- 文案内容可以编辑
- 每个文案块编辑后，失去焦点都应该保存配置到本地；修改配置也应该保存到本地；文件保存在 项目/角色分配.txt
- 批量操作：添加批量分配角色、批量设置情绪等功能
- 模板功能：添加常用情绪、背景、分镜的模板，提高效率
- 预览功能：添加分镜预览，可以简单绘制或描述画面效果
- 拖拽排序：支持拖拽调整文案块顺序

### AI 分析按钮

- 点击后将原文和文案发给 deepseek，让他分析每一个文案块的配置： 哪个角色来读，比如 旁白、男主的人名、女主的人名；应该用什么情绪；制作视频的时候，背景推荐是什么；制作视频的时候分镜效果是什么样的；这个画面里都有哪些角色出现
- 分析结束后，将数据更新到页面上，并将配置更新到本地 项目/角色分配.txt

### 角色绑定配音人配置

- 角色是书中的人名，配音人是 tts 的角色名
- 每次修改后，需要将配置保存到本地；文件保存在 项目/配音人.txt

### 生成配音按钮

- 点击后先将相同配音人的合并成一个数组，然后逐一发给 tts，每一句话生成一个 音频。然后这个配音人的都生成完后，在生成下一个配音人的
- tts 这里本地使用的 gpt-sovits
- 生成的音频保存在 项目/配音/音频名.wav;音频名你需要想个办法，让他和文案块对应上
- 音频质量控制：添加音频参数配置（语速、音调、音量等）
- 配音风格：添加不同配音风格选择（正式、轻松、戏剧等）
- 音频格式：支持多种音频格式（WAV、MP3、FLAC 等）
- 进度显示：配音生成过程中显示进度条和剩余时间
- 音频缓存：已生成的音频文件缓存机制

### 试听按钮

- 可以指定从哪个块开始播放
- 可以暂停
- 可以停止
- 配音预览：生成前可以预览单个文案块的配音效果

### 配置音频间隔毫秒

- 默认 50ms
- 需要保存到本地配置

### 下载配音按钮

- 将配音合并成一个后保存到指定位置

### 下载字幕按钮

- 点击后根据音频时常、音频间隔时间，组织 srt

### 下载分镜配置按钮

- 本文件数据是基于字幕文件生成
- 每个字幕后面会添加已下内容
  - [画面中角色：女主的名，男主的名字]
  - [画面背景：医院病房]
  - [画面分镜：女主的名字躺在病房床上，男主的名字跪在边上握着女主的手]
- 举例：
  4
  00:00:06,762 --> 00:00:08,469
  不但求着渣男渣女拿刀捅自己[画面中角色:谢弥、CP 粉][画面背景：昏暗的马路][画面分镜：CP 粉将到捅进谢弥的身体，身体流出鲜血]

# 用户体验优化

## 界面交互

- 快捷键支持：添加常用操作的键盘快捷键
- 拖拽排序：文案块支持拖拽调整顺序
- 搜索过滤：在长文案中快速定位特定内容
- 响应式设计：暂时只考虑 PC 端，不考虑移动端

## 操作反馈

- 操作成功/失败的明确提示
- 加载状态指示器
- 进度条显示长时间操作进度

# 性能优化

## 大文件处理

- 对于长文案，建议分页或虚拟滚动
- 音频文件分块加载，避免内存占用过大

## 异步处理

- 配音生成等耗时操作使用异步处理
- 支持后台任务，不阻塞用户界面操作

# 测试和调试

## 配置验证

- 检查配置完整性，提示缺失项
- 验证 API 连接和权限
- 检查文件路径和权限

## 性能监控

- 显示 API 调用次数、生成时间等统计信息
- 内存和 CPU 使用情况监控
- 音频生成性能分析

# 数据安全

## 备份机制

- 自动定期备份项目数据
- 支持手动备份和恢复
- 备份文件版本管理

## 隐私保护

- API 密钥本地加密存储
- 敏感数据不记录到日志
- 支持数据清理功能

# 额外要求

- 每次最后不要重新运行项目，我会自己手动运行
